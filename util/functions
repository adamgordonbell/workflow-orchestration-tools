#! /bin/bash
# shellcheck disable=SC2207 # Arrays are a pain in bash 3

echo "functions assume they are run from repo root"
echo "run \"list\" for a list of helpers"


INIT_LOCATION="$0"
export PGPASSWORD=password

list(){
    ./util/list.awk "$INIT_LOCATION"
}

## External

login(){
    npx dbos-cloud login 
}

dashboard(){
    echo "https://console.dbos.dev/"
    npx dbos-cloud dashboard url
}

start_db() {
    # Default PostgreSQL port
    local port=5432
   
    # Start PostgreSQL in Docker with a named volume
    if ! docker run --rm --name=dbos-db \
        --env=POSTGRES_PASSWORD="$PGPASSWORD" \
        --env=PGDATA=/var/lib/postgresql/data \
        --volume=postgres_data:/var/lib/postgresql/data \
        -p "${port}:5432" -d sibedge/postgres-plv8; then
        echo "Error starting PostgreSQL in Docker"
        return 1
    fi
    echo "Waiting for PostgreSQL to start..."
    # Check if PostgreSQL is ready
    local attempts=30
    while [ $attempts -gt 0 ]; do
        if docker exec dbos-db psql -U postgres -c "SELECT 1;" >/dev/null 2>&1; then
            echo "PostgreSQL started!"
            echo "Database started successfully!"
            return 0
        fi
        attempts=$((attempts-1))
        sleep 1
    done
    echo "Failed to start PostgreSQL."
    return 1
}

db_migrate(){
    npx dbos migrate
}

start(){
    npm run build
    npx dbos start
}

dbcli(){
    pgcli -h localhost -p 5432 -U postgres -d widget_store
}

reset_db(){
    echo "Stopping the database..."
    if ! docker stop dbos-db; then
        echo "Error: Failed to stop the database container."
        return 1
    fi

    echo "Removing the database volume..."
    if ! docker volume rm postgres_data; then
        echo "Error: Failed to remove the database volume."
        return 1
    fi

    echo "Starting a new database instance..."
    if ! start_db; then
        echo "Error: Failed to start a new database instance."
        return 1
    fi

    echo "Applying migrations..."
    if ! db_migrate; then
        echo "Error: Failed to apply migrations."
        return 1
    fi
    echo "Database reset complete!"
}
